// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addProductCart = `-- name: AddProductCart :exec
INSERT INTO profile_product_cart_items (product_id, profile_id, product_quantity)
VALUES ($1, $2, $3)
`

type AddProductCartParams struct {
	ProductID       int32
	ProfileID       string
	ProductQuantity int32
}

func (q *Queries) AddProductCart(ctx context.Context, arg AddProductCartParams) error {
	_, err := q.db.Exec(ctx, addProductCart, arg.ProductID, arg.ProfileID, arg.ProductQuantity)
	return err
}

const addProductFavorite = `-- name: AddProductFavorite :exec
INSERT INTO profile_product_favorites (product_id, profile_id)
VALUES ($1, $2)
`

type AddProductFavoriteParams struct {
	ProductID int32
	ProfileID string
}

func (q *Queries) AddProductFavorite(ctx context.Context, arg AddProductFavoriteParams) error {
	_, err := q.db.Exec(ctx, addProductFavorite, arg.ProductID, arg.ProfileID)
	return err
}

const addUserProfile = `-- name: AddUserProfile :exec
INSERT INTO profiles (id)
VALUES ($1)
`

func (q *Queries) AddUserProfile(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, addUserProfile, id)
	return err
}

const getProductInUserCart = `-- name: GetProductInUserCart :one
SELECT product_id, profile_id, product_quantity, created_at FROM profile_product_cart_items
WHERE product_id = $1 AND profile_id = $2
`

type GetProductInUserCartParams struct {
	ProductID int32
	ProfileID string
}

func (q *Queries) GetProductInUserCart(ctx context.Context, arg GetProductInUserCartParams) (ProfileProductCartItem, error) {
	row := q.db.QueryRow(ctx, getProductInUserCart, arg.ProductID, arg.ProfileID)
	var i ProfileProductCartItem
	err := row.Scan(
		&i.ProductID,
		&i.ProfileID,
		&i.ProductQuantity,
		&i.CreatedAt,
	)
	return i, err
}

const getUserCartItems = `-- name: GetUserCartItems :many
SELECT
    products.id,
    products.profile_id,
    products.title,
    products.short_description,
    products.price,
    profile_product_cart_items.product_quantity AS quantity
FROM
    products
JOIN
    profile_product_cart_items ON profile_product_cart_items.product_id = products.id
WHERE 
    profile_product_cart_items.profile_id = $1
`

type GetUserCartItemsRow struct {
	ID               int32
	ProfileID        pgtype.Text
	Title            string
	ShortDescription pgtype.Text
	Price            pgtype.Numeric
	Quantity         int32
}

func (q *Queries) GetUserCartItems(ctx context.Context, profileID string) ([]GetUserCartItemsRow, error) {
	rows, err := q.db.Query(ctx, getUserCartItems, profileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserCartItemsRow
	for rows.Next() {
		var i GetUserCartItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.Title,
			&i.ShortDescription,
			&i.Price,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserFavorites = `-- name: GetUserFavorites :many

SELECT
    products.id, products.profile_id, products.title, products.description, products.short_description, products.price, products.quantity, products.discount_price, products.regular_price, products.created_at, products.updated_at, products.type
FROM
    products
JOIN
    profile_product_favorites ON profile_product_favorites.product_id = products.id
WHERE 
    profile_product_favorites.profile_id = $1
`

// -- name: GetUserFavorites :many
// SELECT * FROM profile_product_favorites
// WHERE profile_id = $1;
func (q *Queries) GetUserFavorites(ctx context.Context, profileID string) ([]Product, error) {
	rows, err := q.db.Query(ctx, getUserFavorites, profileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.Title,
			&i.Description,
			&i.ShortDescription,
			&i.Price,
			&i.Quantity,
			&i.DiscountPrice,
			&i.RegularPrice,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserProfile = `-- name: GetUserProfile :one
SELECT id, created_at, thumbnail_url, email, username FROM profiles
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserProfile(ctx context.Context, id string) (Profile, error) {
	row := q.db.QueryRow(ctx, getUserProfile, id)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ThumbnailUrl,
		&i.Email,
		&i.Username,
	)
	return i, err
}

const removeProductCart = `-- name: RemoveProductCart :exec
DELETE FROM profile_product_cart_items
WHERE product_id = $1 AND profile_id = $2
`

type RemoveProductCartParams struct {
	ProductID int32
	ProfileID string
}

func (q *Queries) RemoveProductCart(ctx context.Context, arg RemoveProductCartParams) error {
	_, err := q.db.Exec(ctx, removeProductCart, arg.ProductID, arg.ProfileID)
	return err
}

const removeProductfavorite = `-- name: RemoveProductfavorite :exec
DELETE FROM profile_product_favorites
WHERE product_id = $1 AND profile_id = $2
`

type RemoveProductfavoriteParams struct {
	ProductID int32
	ProfileID string
}

func (q *Queries) RemoveProductfavorite(ctx context.Context, arg RemoveProductfavoriteParams) error {
	_, err := q.db.Exec(ctx, removeProductfavorite, arg.ProductID, arg.ProfileID)
	return err
}

const updateProductCartQuantity = `-- name: UpdateProductCartQuantity :exec
UPDATE profile_product_cart_items
SET product_quantity = $1
WHERE product_id = $2 AND profile_id = $3
`

type UpdateProductCartQuantityParams struct {
	ProductQuantity int32
	ProductID       int32
	ProfileID       string
}

func (q *Queries) UpdateProductCartQuantity(ctx context.Context, arg UpdateProductCartQuantityParams) error {
	_, err := q.db.Exec(ctx, updateProductCartQuantity, arg.ProductQuantity, arg.ProductID, arg.ProfileID)
	return err
}
