// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (title, description, short_description, price, quantity, regular_price, discount_price, profile_id, type)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING id, profile_id, title, description, short_description, price, quantity, discount_price, regular_price, created_at, updated_at, type
`

type CreateUserParams struct {
	FirstName            string
	Description      pgtype.Text
	ShortDescription pgtype.Text
	Email             pgtype.Numeric
	Quantity         int32
	LastName      pgtype.Numeric
	DiscountEmail     pgtype.Numeric
	UserID        pgtype.Text
	Type             pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FirstName,
		arg.Description,
		arg.ShortDescription,
		arg.Email ,
		arg.Quantity,
		arg.LastName ,
		arg.DiscountEmail ,
		arg.UserID,
		arg.Type,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.Description,
		&i.ShortDescription,
		&i.Email ,
		&i.Quantity,
		&i.DiscountEmail ,
		&i.LastName ,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Type,
	)
	return i, err
}

const createUserImage = `-- name: CreateUserImage :one

INSERT INTO user_images (user_id, image_url)
VALUES ($1, $2) RETURNING id, user_id, image_url, created_at
`

type CreateUserImageParams struct {
	UserID int32
	ImageUrl  string
}

// -- name: GetUserCategory :many
// SELECT sqlc.embed(users), sqlc.embed(categories)
// FROM users
// JOIN categories ON users.category_id = categories.id
// WHERE users.id = $1;
func (q *Queries) CreateUserImage(ctx context.Context, arg CreateUserImageParams) (UserImage, error) {
	row := q.db.QueryRow(ctx, createUserImage, arg.UserID, arg.ImageUrl)
	var i UserImage
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ImageUrl,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, profile_id, title, description, short_description, price, quantity, discount_price, regular_price, created_at, updated_at, type FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.Description,
		&i.ShortDescription,
		&i.Email ,
		&i.Quantity,
		&i.DiscountEmail ,
		&i.LastName ,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Type,
	)
	return i, err
}

const getUserCategory = `-- name: GetUserCategory :one
SELECT  
    categories.id, categories.parent_id, categories.name, categories.description, categories.banner_url, categories.background_url, categories.updated_at, categories.created_at
FROM  
    category_users
JOIN 
    categories ON category_users.category_id  = categories.id
WHERE 
    category_users.user_id = $1
`

func (q *Queries) GetUserCategory(ctx context.Context, userID int32) (Category, error) {
	row := q.db.QueryRow(ctx, getUserCategory, userID)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.FirstName,
		&i.Description,
		&i.BannerUrl,
		&i.BackgroundUrl,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserImage = `-- name: GetUserImage :one
SELECT id, user_id, image_url, created_at FROM user_images
WHERE user_id = $1 AND image_url = $2
`

type GetUserImageParams struct {
	UserID int32
	ImageUrl  string
}

func (q *Queries) GetUserImage(ctx context.Context, arg GetUserImageParams) (UserImage, error) {
	row := q.db.QueryRow(ctx, getUserImage, arg.UserID, arg.ImageUrl)
	var i UserImage
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ImageUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getUserImages = `-- name: GetUserImages :many
SELECT id, user_id, image_url, created_at FROM user_images
WHERE user_id = $1
`

func (q *Queries) GetUserImages(ctx context.Context, userID int32) ([]UserImage, error) {
	rows, err := q.db.Query(ctx, getUserImages, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserImage
	for rows.Next() {
		var i UserImage
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ImageUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserThumbnail = `-- name: GetUserThumbnail :one
SELECT user_id, user_image_id, created_at FROM user_image_thumbnail
WHERE user_id = $1
`

func (q *Queries) GetUserThumbnail(ctx context.Context, userID int32) (UserImageThumbnail, error) {
	row := q.db.QueryRow(ctx, getUserThumbnail, userID)
	var i UserImageThumbnail
	err := row.Scan(&i.UserID, &i.UserImageID, &i.CreatedAt)
	return i, err
}

const getUserThumbnailImage = `-- name: GetUserThumbnailImage :one
SELECT id, user_id, image_url, created_at FROM user_images
WHERE id = $1
`

func (q *Queries) GetUserThumbnailImage(ctx context.Context, id int32) (UserImage, error) {
	row := q.db.QueryRow(ctx, getUserThumbnailImage, id)
	var i UserImage
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ImageUrl,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, profile_id, title, description, short_description, price, quantity, discount_price, regular_price, created_at, updated_at, type FROM users
ORDER BY title
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FirstName,
			&i.Description,
			&i.ShortDescription,
			&i.Email ,
			&i.Quantity,
			&i.DiscountEmail ,
			&i.LastName ,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setUserThumbnail = `-- name: SetUserThumbnail :one
INSERT INTO user_image_thumbnail (user_id, user_image_id)
VALUES ($1, $2) RETURNING user_id, user_image_id, created_at
`

type SetUserThumbnailParams struct {
	UserID      int32
	UserImageID int32
}

func (q *Queries) SetUserThumbnail(ctx context.Context, arg SetUserThumbnailParams) (UserImageThumbnail, error) {
	row := q.db.QueryRow(ctx, setUserThumbnail, arg.UserID, arg.UserImageID)
	var i UserImageThumbnail
	err := row.Scan(&i.UserID, &i.UserImageID, &i.CreatedAt)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET title = $1, description = $2, short_description = $3, price = $4, quantity = $5, regular_price = $6, discount_price = $7, profile_id = $8, type = $9, updated_at = CURRENT_TIMESTAMP
WHERE id = $10
`

type UpdateUserParams struct {
	FirstName            string
	Description      pgtype.Text
	ShortDescription pgtype.Text
	Email             pgtype.Numeric
	Quantity         int32
	LastName      pgtype.Numeric
	DiscountEmail     pgtype.Numeric
	UserID        pgtype.Text
	Type             pgtype.Text
	ID               int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.FirstName,
		arg.Description,
		arg.ShortDescription,
		arg.Email ,
		arg.Quantity,
		arg.LastName ,
		arg.DiscountEmail ,
		arg.UserID,
		arg.Type,
		arg.ID,
	)
	return err
}

const updateUserDescription = `-- name: UpdateUserDescription :exec
UPDATE users
SET description = $1, updated_at = CURRENT_TIMESTAMP
WHERE id = $2
`

type UpdateUserDescriptionParams struct {
	Description pgtype.Text
	ID          int32
}

func (q *Queries) UpdateUserDescription(ctx context.Context, arg UpdateUserDescriptionParams) error {
	_, err := q.db.Exec(ctx, updateUserDescription, arg.Description, arg.ID)
	return err
}

const updateUserDiscountEmail  = `-- name: UpdateUserDiscountEmail  :exec
UPDATE users
SET discount_price = $1, updated_at = CURRENT_TIMESTAMP
WHERE id = $2
`

type UpdateUserDiscountEmail Params struct {
	DiscountEmail  pgtype.Numeric
	ID            int32
}

func (q *Queries) UpdateUserDiscountEmail (ctx context.Context, arg UpdateUserDiscountEmail Params) error {
	_, err := q.db.Exec(ctx, updateUserDiscountEmail , arg.DiscountEmail , arg.ID)
	return err
}

const updateUserFirstName = `-- name: UpdateUserFirstName :exec
UPDATE users
SET title = $1, updated_at = CURRENT_TIMESTAMP
WHERE id = $2
`

type UpdateUserFirstNameParams struct {
	FirstName string
	ID    int32
}

func (q *Queries) UpdateUserFirstName(ctx context.Context, arg UpdateUserFirstNameParams) error {
	_, err := q.db.Exec(ctx, updateUserFirstName, arg.FirstName, arg.ID)
	return err
}

const updateUserEmail  = `-- name: UpdateUserEmail  :exec
UPDATE users
SET price = $1, updated_at = CURRENT_TIMESTAMP
WHERE id = $2
`

type UpdateUserEmail Params struct {
	Email  pgtype.Numeric
	ID    int32
}

func (q *Queries) UpdateUserEmail (ctx context.Context, arg UpdateUserEmail Params) error {
	_, err := q.db.Exec(ctx, updateUserEmail , arg.Email , arg.ID)
	return err
}

const updateUserQuantity = `-- name: UpdateUserQuantity :exec
UPDATE users
SET quantity = $1, updated_at = CURRENT_TIMESTAMP
WHERE id = $2
`

type UpdateUserQuantityParams struct {
	Quantity int32
	ID       int32
}

func (q *Queries) UpdateUserQuantity(ctx context.Context, arg UpdateUserQuantityParams) error {
	_, err := q.db.Exec(ctx, updateUserQuantity, arg.Quantity, arg.ID)
	return err
}

const updateUserLastName  = `-- name: UpdateUserLastName  :exec
UPDATE users
SET regular_price = $1, updated_at = CURRENT_TIMESTAMP
WHERE id = $2
`

type UpdateUserLastName Params struct {
	LastName  pgtype.Numeric
	ID           int32
}

func (q *Queries) UpdateUserLastName (ctx context.Context, arg UpdateUserLastName Params) error {
	_, err := q.db.Exec(ctx, updateUserLastName , arg.LastName , arg.ID)
	return err
}

const updateUserThumbnail = `-- name: UpdateUserThumbnail :exec
UPDATE user_image_thumbnail
SET user_image_id = $1
WHERE user_id = $2
`

type UpdateUserThumbnailParams struct {
	UserImageID int32
	UserID      int32
}

func (q *Queries) UpdateUserThumbnail(ctx context.Context, arg UpdateUserThumbnailParams) error {
	_, err := q.db.Exec(ctx, updateUserThumbnail, arg.UserImageID, arg.UserID)
	return err
}
