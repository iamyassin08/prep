// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: category.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addProductToCategory = `-- name: AddProductToCategory :one
INSERT INTO category_products (category_id, product_id)
VALUES ($1, $2) RETURNING id, product_id, category_id
`

type AddProductToCategoryParams struct {
	CategoryID int32
	ProductID  int32
}

func (q *Queries) AddProductToCategory(ctx context.Context, arg AddProductToCategoryParams) (CategoryProduct, error) {
	row := q.db.QueryRow(ctx, addProductToCategory, arg.CategoryID, arg.ProductID)
	var i CategoryProduct
	err := row.Scan(&i.ID, &i.ProductID, &i.CategoryID)
	return i, err
}

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (name, description, parent_id)
VALUES ($1, $2, $3) RETURNING id, parent_id, name, description, banner_url, background_url, updated_at, created_at
`

type CreateCategoryParams struct {
	Name        string
	Description pgtype.Text
	ParentID    pgtype.Int4
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory, arg.Name, arg.Description, arg.ParentID)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.Name,
		&i.Description,
		&i.BannerUrl,
		&i.BackgroundUrl,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories
WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteCategory, id)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT id, parent_id, name, description, banner_url, background_url, updated_at, created_at FROM categories
WHERE id = $1
`

func (q *Queries) GetCategory(ctx context.Context, id int32) (Category, error) {
	row := q.db.QueryRow(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.Name,
		&i.Description,
		&i.BannerUrl,
		&i.BackgroundUrl,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getCategoryBackground = `-- name: GetCategoryBackground :one
SELECT background_url FROM categories
WHERE id = $1
`

func (q *Queries) GetCategoryBackground(ctx context.Context, id int32) (pgtype.Text, error) {
	row := q.db.QueryRow(ctx, getCategoryBackground, id)
	var background_url pgtype.Text
	err := row.Scan(&background_url)
	return background_url, err
}

const getCategoryBanner = `-- name: GetCategoryBanner :one
SELECT banner_url FROM categories
WHERE id = $1
`

func (q *Queries) GetCategoryBanner(ctx context.Context, id int32) (pgtype.Text, error) {
	row := q.db.QueryRow(ctx, getCategoryBanner, id)
	var banner_url pgtype.Text
	err := row.Scan(&banner_url)
	return banner_url, err
}

const listAttributesInCategory = `-- name: ListAttributesInCategory :many
SELECT
    category_attributes.id, category_attributes.category_id, category_attributes.name, category_attributes.attribute_type_id, category_attributes.is_required, category_attributes.enum_values
FROM
    categories
JOIN
    category_attributes ON categories.id = category_attributes.category_id
JOIN
    attribute_types ON category_attributes.attribute_type_id = attribute_types.id
WHERE 
    categories.id = $1
`

func (q *Queries) ListAttributesInCategory(ctx context.Context, id int32) ([]CategoryAttribute, error) {
	rows, err := q.db.Query(ctx, listAttributesInCategory, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CategoryAttribute
	for rows.Next() {
		var i CategoryAttribute
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Name,
			&i.AttributeTypeID,
			&i.IsRequired,
			&i.EnumValues,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCategories = `-- name: ListCategories :many
SELECT id, parent_id, name, description, banner_url, background_url, updated_at, created_at
FROM categories
ORDER BY name
`

func (q *Queries) ListCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.Query(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.Name,
			&i.Description,
			&i.BannerUrl,
			&i.BackgroundUrl,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsInCategory = `-- name: ListProductsInCategory :many
SELECT
    products.id, products.profile_id, products.title, products.description, products.short_description, products.price, products.quantity, products.discount_price, products.regular_price, products.created_at, products.updated_at, products.type
FROM
    categories
JOIN
    category_products ON categories.id = category_products.category_id
JOIN
    products ON products.id = category_products.product_id
WHERE 
    categories.id = $1
`

func (q *Queries) ListProductsInCategory(ctx context.Context, id int32) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProductsInCategory, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.Title,
			&i.Description,
			&i.ShortDescription,
			&i.Price,
			&i.Quantity,
			&i.DiscountPrice,
			&i.RegularPrice,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setCategoryBackground = `-- name: SetCategoryBackground :one
Update categories
SET background_url = $1
WHERE id = $2 RETURNING id, parent_id, name, description, banner_url, background_url, updated_at, created_at
`

type SetCategoryBackgroundParams struct {
	BackgroundUrl pgtype.Text
	ID            int32
}

func (q *Queries) SetCategoryBackground(ctx context.Context, arg SetCategoryBackgroundParams) (Category, error) {
	row := q.db.QueryRow(ctx, setCategoryBackground, arg.BackgroundUrl, arg.ID)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.Name,
		&i.Description,
		&i.BannerUrl,
		&i.BackgroundUrl,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const setCategoryBanner = `-- name: SetCategoryBanner :one
Update categories
SET banner_url = $1
WHERE id = $2 RETURNING id, parent_id, name, description, banner_url, background_url, updated_at, created_at
`

type SetCategoryBannerParams struct {
	BannerUrl pgtype.Text
	ID        int32
}

func (q *Queries) SetCategoryBanner(ctx context.Context, arg SetCategoryBannerParams) (Category, error) {
	row := q.db.QueryRow(ctx, setCategoryBanner, arg.BannerUrl, arg.ID)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.Name,
		&i.Description,
		&i.BannerUrl,
		&i.BackgroundUrl,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
SET name = $1, description = $2, parent_id = $3, updated_at = CURRENT_TIMESTAMP
WHERE id = $4 RETURNING id, parent_id, name, description, banner_url, background_url, updated_at, created_at
`

type UpdateCategoryParams struct {
	Name        string
	Description pgtype.Text
	ParentID    pgtype.Int4
	ID          int32
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategory,
		arg.Name,
		arg.Description,
		arg.ParentID,
		arg.ID,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.Name,
		&i.Description,
		&i.BannerUrl,
		&i.BackgroundUrl,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
